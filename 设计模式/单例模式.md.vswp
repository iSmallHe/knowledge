vnote_backup_file_826537664 D:/toolinstall/vnote/data/设计模式/单例模式.md
# 单例模式
<font color="#FFA500">**单例模式定义**</font>：一个类只有一个实例对象，且该类能自行创建这一实例。  

## 单例模式具体实现：

### 1. 饿汉式
```java
public class Singleton
{
    private Singleton(){}
    public static final Singleton singleton = new Singleton();

    public static Singleton getInstance(){
        return singleton;
    }
}
```
### 2.懒汉式
```java
//此懒汉式仅仅只能在单线程下使用，多线程时可能会多次创建LazySingleton
public class LazySingleton {
    private LazySingleton(){}

    public static LazySingleton lazy ;

    public LazySingleton getInstance(){
        if(lazy == null){
            lazy = new LazySingleton();
        }
        return lazy;
    }
}

//此懒汉式属于安全的多线程下单例模式
class SafeLazySingleton{
    private SafeLazySingleton(){}

    public static volatile SafeLazySingleton  safeLazySingleton;

    public static SafeLazySingleton getInstance(){
        if(safeLazySingleton == null){
            synchronized(SafeLazySingleton.class){
                if(safeLazySingleton == null){
                    safeLazySingleton = new SafeLazySingleton();
                }
            }
        }
        return safeLazySingleton;
    }
}
```
### 3.静态内部类
```java
class StaticSingleton{
    private StaticSingleton(){}

    public static class InnerClass{
        public static final StaticSingleton staticSingleton = new StaticSingleton();
    }

    public static StaticSingleton getInstatnce(){
        return InnerClass.staticSingleton;
    }
}
```

### 4.枚举
```java
public enum EnumSingleton {
    INSTANCE;

    public static EnumSingleton getInstance(){
        return INSTANCE;
    }
}
```